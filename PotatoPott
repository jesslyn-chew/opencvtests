import sys
import time
import telepot
from telepot.loop import MessageLoop
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton

from selenium import webdriver
import numpy as np
import csv 
from datetime import datetime, timedelta
########################################################################################
#### ICAL GENERATOR #####
# Function: Generate an ICal for NTU classes and events
#
#
#
#
#
#
#
########################################################################################

# Naming and Setting Variables
########################################################################################
ModulesData = [] 
ModulesName = []

def reset_flags():                                                                      # Flags act as a step counter, ensure code runs in order
    global CourseCode_flag,getCal_flag                                                       
    global CheckCourse_flag, ClassIndex_flag, ExtraOptions_flag, Generate_flag, Remove_flag
    CourseCode_flag = getCal_flag = CheckCourse_flag = ClassIndex_flag = ExtraOptions_flag = Remove_flag = Generate_flag = False                      # Reset Flag to "False"
reset_flags()                                                                           # Ensure all flags are initialized and set to false

# Telebot Functions 
########################################################################################

# For every message through telegram, it gets filter out here (according to message type)
def handle(msg):
    global content_type, chat_type, chat_id
    global flavor
    flavor = telepot.flavor(msg)
    content_type, chat_type, chat_id = telepot.glance(msg, flavor=flavor)
    summary = (flavor, content_type, chat_type, chat_id )
    print (summary)

    if flavor == "chat":
        on_chat_message(msg)

    elif flavor == "callback_query":
        on_callback_query(msg)


def on_chat_message(msg):
    global CourseCode_flag,getCal_flag                                                       
    global CheckCourse_flag, ClassIndex_flag, ExtraOptions_flag, Generate_flag, Remove_flag
    global Selenium_Extraction

    #Step 0: "/start" command to receive information of the bot
    if msg["text"] == "/start":
        reset_flags()
        bot.sendMessage(chat_id, """ Function """)

    #Step 1: "/getCal" command to receive options for type of ICal
    elif msg["text"] == "/getCal":
        reset_flags()
        getCal_flag= True
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='Get ICal for Specific Course(s)', callback_data='Course')],
                [InlineKeyboardButton(text='Get ICal for General NTU Events', callback_data='NTUEvent')]
                ])
        message_with_inline_keyboard = bot.sendMessage(chat_id, "Which ICal would you like to generate?", reply_markup=markup)

    #Step 3: After providing Course Code, check whether the course retrieved is correct
    elif CourseCode_flag == True:
        Courseinput = msg["text"]
        try:
            Selenium_Extraction = timetable_extract(Courseinput)
            bot.sendMessage(chat_id, Selenium_Extraction[0])
            markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='Yes', callback_data='Y')],
                    [InlineKeyboardButton(text='No', callback_data='N')]
                    ])
            bot.sendMessage(chat_id, 'Is this the course you are looking for? (Yes/No)', reply_markup=markup)
            reset_flags()
            CheckCourse_flag = True
        except NoSuchElementException:
            bot.sendMessage(chat_id, "Can't find your course. Please retry: ")
            reset_flags()
            CourseCode_flag = True

    #Step 5: After obtaining class index, get timetable and extra options
    elif ClassIndex_flag == True:
        Classinput = msg["text"]
        timetable_extract2(Selenium_Extraction[1], Classinput)
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='Add modules', callback_data='ADD')],
                [InlineKeyboardButton(text='Remove modules', callback_data='REMOVE')],
                [InlineKeyboardButton(text='Continue and retrieve ICal', callback_data='CONTINUE')]
                ])
        bot.sendMessage(chat_id, 'Would you like to:', reply_markup=markup)
        reset_flags()
        ExtraOptions_flag = True

def on_callback_query(msg):
    global CourseCode_flag,getCal_flag                                                       
    global CheckCourse_flag, ClassIndex_flag, ExtraOptions_flag, Generate_flag, Remove_flag

    #Step 2a: Choosing option for getting course ICal => input CourseCode
    if (chat_id == "Course" and getCal_flag == True):
        bot.sendMessage(chat_type, text="Please enter your course code/name:")
        reset_flags()
        CourseCode_flag = True
        
    #Step 2b: Choosing option for getting ntu general ICal [End]
    elif (chat_id == 'NTUEvent' and getCal_flag == True):
        bot.sendMessage(chat_type, text='Here is the ICal for AY2017/18 NTU Events')
        reset_flags()
        # Need to somehow input data

    elif CheckCourse_flag == True:
        #Step 4a: If course is correct, get class index input
        if chat_id == "Y":
            bot.sendMessage(chat_type, "Please enter your class index:")
            reset_flags()
            ClassIndex_flag = True

        #Step 4b: IF course is wrong, get another course input    
        if chat_id == "N":
            bot.sendMessage(chat_type, text="Please enter your CORRECT course code:")
            reset_flags()
            CourseCode_flag = True
            
    elif ExtraOptions_flag == True:
        #Step 6a: ADD more modules
        if chat_id == "ADD":
            bot.sendMessage(chat_type, text="Please enter your course code/name:")
            reset_flags()
            CourseCode_flag = True

        #Step 6b: REMOVE modules
        if chat_id == "REMOVE":
            global ModulesName
            markup_code = "InlineKeyboardMarkup(inline_keyboard=["
            modulecounter = 0
            for Modules in ModulesName:
                code_segment = "[InlineKeyboardButton(text='{}', callback_data='{}', switch_inline_query=None, switch_inline_query_current_chat=None, callback_game=None, pay=None)],".format(Modules,modulecounter)
                markup_code = markup_code + code_segment
                modulecounter += 1
            markup_code = markup_code[:-1] + "])"
            markup_code = eval (markup_code)
            bot.sendMessage(chat_type, 'Which module would you like to remove?', reply_markup=markup_code)
            reset_flags()
            Remove_flag = True

        #Step6c : Export ICal
        if chat_id == "CONTINUE":
            global ModulesData
            ICal_Generator(ModulesData)
            reset_flags()
            Generate_flag = True
            
    #Step6bi : After Remove Module   
    elif Remove_flag == True:
        mod_number = int(chat_id)
        del(ModulesData[mod_number])
        del(ModulesName[mod_number])
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='Add modules', callback_data='ADD')],
                [InlineKeyboardButton(text='Remove modules', callback_data='REMOVE')],
                [InlineKeyboardButton(text='Continue and retrieve ICal', callback_data='CONTINUE')]
                ])
        bot.sendMessage(chat_type, 'Would you like to:', reply_markup=markup)
        reset_flags()
        ExtraOptions_flag = True
      
# Selenium Function
################################################################################################
#Step 3: Retrieve Course Timetable with selenium
def timetable_extract(Courseinput):
    global ModulesName
    # Problem 1: driver not working (Issue of path of driver)
    driver = webdriver.Chrome()                                             # Run chrome
    driver.get("https://wish.wis.ntu.edu.sg/webexe/owa/aus_schedule.main")  # Chrome go to website

    #@@@@assert "Class Schedule" in driver.title@@@@@@@@@                   ## Check correct website

    Keyword = driver.find_element_by_name("r_subj_code")                    # Find the element for inputting course code
    Keyword.send_keys(Courseinput)                                          # Input Userinput to element found
    driver.find_element_by_xpath('//input[4]').click()                      # Find and select the "Enter" button
    # Problem 2: Enter the values was an issue, button was assigned an input value so cannot use 'select'

    # Switching Tabs:
    tabs = driver.window_handles                                            # Get list for all tab names
    driver.switch_to_window(tabs[1])                                        # Switch to 2nd tab 
    #print (driver.current_url)                                             ## Check the focus tab is correct

    #@@@@@assert "Class Schedule" in driver.title@@@@@@@

    Retrieved_Course = driver.find_element_by_tag_name("tbody")             # Find the course code and name obtained
    Retrieved_Course = (Retrieved_Course.text)
    ModulesName.append(Retrieved_Course)

    Alltext = []                                                            # Create empty set
    tablecontents = driver.find_elements_by_tag_name("TD")                  # Find element of "INDEX, TYPE, GROUP, DAY, TIME, VENUE, REMARK"

    for elements in tablecontents:                                          # Find each string:
        elements = elements.text                                            # Convert the retrieved element to text form
        Alltext.append(elements)                                            # Input all text into an array

    del(Alltext[0:5])                                                       # Remove elements that are not in the table
    #print(Alltext)                                                          ## Check that list is correct

    driver.quit()                                                           # End selenium
    Selenium_Extraction = [Retrieved_Course, Alltext]
    return Selenium_Extraction

    
def timetable_extract2(Alltext,Classinput):
    global ModulesData, ModulesName
    length = len(Alltext)                           # To obtain total no. of elements in array
    subsetno = length / 7                           # Find total no. of rows
    Alltext = np.array(Alltext)
    Table = Alltext.reshape(int(subsetno),7)        # Create a "table" format of x rows and 5 columns
    newlist = []                                    # Create an empty set for valid rows only, aka "newlist"
    finallist = []

    # filter top half
    for row in Table:
        if (row[0] != Classinput):
            Table = np.delete(Table,[0],0)
        elif (row[0] == Classinput):
            break
    
    newlist.append(Table[0])                        # Move the first row to "newlist"

    # filter bottom half
    for row in Table[1:]:                               # Check EACH row
        if (row[0] == ""):                          # If first column is empty, then carry out:
            newlist.append(row)                     # Move row to "newlist"
        elif (row[0] != ""):                        # If first colum is not empty, stop loop
            break

    for rows in newlist:
        rows[0] = newlist[0][0]
        TIME = rows[4]
    
        TIME = TIME.split("-")
        StartTime = TIME[0]
        StartTime = str(StartTime[0:2]) + ":" + str(StartTime[2:4])
        EndTime = TIME[1]
        EndTime = str(EndTime[0:2]) + ":" + str(EndTime[2:4])

        rows = np.delete(rows, 4)
        rows = np.insert(rows, 4, EndTime)
        rows = np.insert(rows, 4, StartTime)
        finallist.append(rows)
        
    #print(finallist)                                  ## Check that "newlist" is correct
    ModulesData.append(finallist)
    print(ModulesData, ModulesName)

# ICAL Generator
#################################################################################################################
def ICal_Generator(finallist):
    for list in finallist:
        First_monday = "14/8/2017" #supposed to be input value from telegram
        dcol = 0 #initial column (course code)
        wk = 0 #including recess wk as wk 6
        total_wks = 13 #to equate to the input of button, if special term thn 5, norm is 13

        #open calendar.csv file
        with open("calendar.csv", "w") as c:
            headers = ("Subject", "StartDate", "StartTime", "EndDate", "EndTime", "AllDayEvent", "Description", "Location")
            writer = csv.DictWriter(c, fieldnames = headers)
            writer.writeheader()
    
        #write data into calendar.csv file
            for row in list:
            
                #define variables here
                subject = row[0]                #subject located at this current row and first column
                starttime = row[4]              #start time located at this current row and column 5th
                endtime = row[5]                #end time located at this current row and column 6th
                alldayevent = "False"           #all day event is set to false
                description = " Type: %s \n Group: %s \n %s" %(row[1],row[2],row[7]) #type of lession and group number is located at 2nd, 3rd, 8th column
                location = row[6]               #location located at this current row and 7th column
        
                #----assigning values to days of wk and changing date accordingly ----#  
                if(row[3] == str("MON")):
                    b = 0
                    date = datetime.strptime(First_monday,'%d/%m/%Y') + timedelta(days=b)
                    date = str(datetime.strftime(date, '%m/%d/%Y'))

                elif(row[3] == str("TUE")):
                    b = 1
                    date = datetime.strptime(First_monday,'%d/%m/%Y') + timedelta(days=b)
                    date = str(datetime.strftime(date, '%m/%d/%Y'))

                elif(row[3] == str("WED")):
                    b = 2
                    date = datetime.strptime(First_monday,'%d/%m/%Y') + timedelta(days=b)
                    date = str(datetime.strftime(date, '%m/%d/%Y'))

                elif(row[3] == str("THU")):
                    b = 3
                    date = datetime.strptime(First_monday,'%d/%m/%Y') + timedelta(days=b)
                    date = str(datetime.strftime(date, '%m/%d/%Y'))
                
                elif(row[3] == str("FRI")):
                    b = 4
                    date = datetime.strptime(First_monday,'%d/%m/%Y') + timedelta(days=b)
                    date = str(datetime.strftime(date, '%m/%d/%Y'))
                ### What about lesson on weekend?
                #----assigning values to days of wk and changing date accordingly ---- #

                #----while loop to print/insert all possible dates into array----#
                dates_list = [date]

                for wk in range(0,13):
                    if(wk != 6):
                        date = datetime.strptime(date,'%m/%d/%Y') + timedelta(days=7)
                        date = str(datetime.strftime(date, '%m/%d/%Y'))
                        dates_list.append(date)
                        print(dates_list)
                    else:
                        date = datetime.strptime(date,'%m/%d/%Y') + timedelta(days=14)
                        date = str(datetime.strftime(date, '%m/%d/%Y'))
                        dates_list.append(date)
                        print(dates_list)


        
                #----while loop to print/insert all possible dates into array----#
                for dcol in range(0,13):
                    start_end_date = dates_list[dcol]
                    writer.writerow({"Subject" : subject, "StartDate" : start_end_date , "StartTime" : starttime , \
                                     "EndDate" : start_end_date , "EndTime" : endtime , "AllDayEvent" : alldayevent , \
                                     "Description" : description, "Location" : location })


        #accessing the website for conversion to ical from csv file
        driver = webdriver.Chrome()                                          
        ##driver.implicitly_wait(10)##                            
        driver.get("https://manas.tungare.name/software/csv-to-ical/")

        #upload file---note if the file is changed to google drive, send keys must change
        upload = driver.find_element_by_xpath("//*[@id='csvFile']")
        upload.send_keys(r"\calendar.csv")
        # FIX THIS
        #converting the file and save to downloads
        convert = driver.find_element_by_xpath("/html/body/article/section/div[1]/form/div/input")
        convert.click()


# Telebot Function 2
################################################################################################
Token = "477217717:AAEY9hYjc2RDE4nXeOd8VBeYBP_kgX43-lA"             # Token from command line
bot = telepot.Bot(Token)
MessageLoop(bot, handle).run_as_thread()

print ('Listening ...')

while 1:                                                            # Keep the program running.
    time.sleep(10)
